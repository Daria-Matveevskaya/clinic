// <auto-generated />
using System;
using Clinic.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Clinic.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Clinic.Data.Entities.Category", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Name");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Name = "Препараты"
                        },
                        new
                        {
                            Name = "Экспресс-тесты на грипп и Covid"
                        },
                        new
                        {
                            Name = "Расходные материалы"
                        });
                });

            modelBuilder.Entity("Clinic.Data.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("GenderAsString")
                        .IsRequired()
                        .HasColumnType("nchar(1)");

                    b.Property<string>("PatronymicName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateTime(1982, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Георгий",
                            GenderAsString = "М",
                            PatronymicName = "Владимирович",
                            Surname = "Иванов"
                        },
                        new
                        {
                            Id = 2,
                            BirthDate = new DateTime(1990, 3, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Вероника",
                            GenderAsString = "Ж",
                            PatronymicName = "Алексеевна",
                            Surname = "Петрова"
                        });
                });

            modelBuilder.Entity("Clinic.Data.Entities.Expense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Expenses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 1
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2023, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 2
                        });
                });

            modelBuilder.Entity("Clinic.Data.Entities.ExpenseItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ExpenseId")
                        .HasColumnType("integer");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<double>("Quantity")
                        .HasColumnType("double precision");

                    b.Property<string>("UnitName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("ExpenseId");

                    b.HasIndex("ProductName");

                    b.HasIndex("UnitName");

                    b.ToTable("ExpenseItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ExpenseId = 1,
                            ProductName = "Парацетамол 500 мг",
                            Quantity = 2.0,
                            UnitName = "Штука"
                        },
                        new
                        {
                            Id = 2,
                            ExpenseId = 1,
                            ProductName = "Ацетилсалициловая кислота 500 мг",
                            Quantity = 3.0,
                            UnitName = "Штука"
                        },
                        new
                        {
                            Id = 3,
                            ExpenseId = 1,
                            ProductName = "Экспресс-тест на грипп",
                            Quantity = 2.0,
                            UnitName = "Штука"
                        },
                        new
                        {
                            Id = 4,
                            ExpenseId = 1,
                            ProductName = "Экспресс-тест на Covid",
                            Quantity = 8.0,
                            UnitName = "Штука"
                        },
                        new
                        {
                            Id = 5,
                            ExpenseId = 2,
                            ProductName = "Парацетамол 500 мг",
                            Quantity = 8.0,
                            UnitName = "Штука"
                        },
                        new
                        {
                            Id = 6,
                            ExpenseId = 2,
                            ProductName = "Ацетилсалициловая кислота 500 мг",
                            Quantity = 8.0,
                            UnitName = "Штука"
                        },
                        new
                        {
                            Id = 7,
                            ExpenseId = 2,
                            ProductName = "Экспресс-тест на грипп",
                            Quantity = 3.0,
                            UnitName = "Штука"
                        },
                        new
                        {
                            Id = 8,
                            ExpenseId = 2,
                            ProductName = "Перчатки",
                            Quantity = 1.0,
                            UnitName = "Упаковка"
                        },
                        new
                        {
                            Id = 9,
                            ExpenseId = 2,
                            ProductName = "Маска медицинская",
                            Quantity = 2.0,
                            UnitName = "Упаковка"
                        });
                });

            modelBuilder.Entity("Clinic.Data.Entities.Product", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.HasKey("Name");

                    b.HasIndex("CategoryName");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Name = "Ацетилсалициловая кислота 500 мг",
                            CategoryName = "Препараты",
                            CreateDate = new DateTime(2023, 11, 12, 20, 0, 40, 752, DateTimeKind.Local).AddTicks(4630)
                        },
                        new
                        {
                            Name = "Парацетамол 500 мг",
                            CategoryName = "Препараты",
                            CreateDate = new DateTime(2023, 11, 12, 20, 0, 40, 752, DateTimeKind.Local).AddTicks(4643)
                        },
                        new
                        {
                            Name = "Экспресс-тест на грипп",
                            CategoryName = "Экспресс-тесты на грипп и Covid",
                            CreateDate = new DateTime(2023, 11, 12, 20, 0, 40, 752, DateTimeKind.Local).AddTicks(4644)
                        },
                        new
                        {
                            Name = "Экспресс-тест на Covid",
                            CategoryName = "Экспресс-тесты на грипп и Covid",
                            CreateDate = new DateTime(2023, 11, 12, 20, 0, 40, 752, DateTimeKind.Local).AddTicks(4646)
                        },
                        new
                        {
                            Name = "Перчатки",
                            CategoryName = "Расходные материалы",
                            CreateDate = new DateTime(2023, 11, 12, 20, 0, 40, 752, DateTimeKind.Local).AddTicks(4647)
                        },
                        new
                        {
                            Name = "Маска медицинская",
                            CategoryName = "Расходные материалы",
                            CreateDate = new DateTime(2023, 11, 12, 20, 0, 40, 752, DateTimeKind.Local).AddTicks(4648)
                        });
                });

            modelBuilder.Entity("Clinic.Data.Entities.Provider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Providers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "ул. Ленина, д. 12",
                            Email = "apteka@mail.ru",
                            Name = "Аптека",
                            Phone = "63-52-41"
                        },
                        new
                        {
                            Id = 2,
                            Address = "ул. Пушкина, д. 15",
                            Email = "sklad@mail.ru",
                            Name = "Склад",
                            Phone = "96-85-74"
                        });
                });

            modelBuilder.Entity("Clinic.Data.Entities.Recipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ProviderId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.ToTable("Recipes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProviderId = 1
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2023, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProviderId = 2
                        });
                });

            modelBuilder.Entity("Clinic.Data.Entities.RecipeItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<double>("Quantity")
                        .HasColumnType("double precision");

                    b.Property<int>("RecipeId")
                        .HasColumnType("integer");

                    b.Property<string>("UnitName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("ProductName");

                    b.HasIndex("RecipeId");

                    b.HasIndex("UnitName");

                    b.ToTable("RecipeItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ExpirationDate = new DateTime(2023, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductName = "Парацетамол 500 мг",
                            Quantity = 10.0,
                            RecipeId = 1,
                            UnitName = "Штука"
                        },
                        new
                        {
                            Id = 2,
                            ExpirationDate = new DateTime(2024, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductName = "Парацетамол 500 мг",
                            Quantity = 20.0,
                            RecipeId = 1,
                            UnitName = "Штука"
                        },
                        new
                        {
                            Id = 3,
                            ExpirationDate = new DateTime(2023, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductName = "Ацетилсалициловая кислота 500 мг",
                            Quantity = 15.0,
                            RecipeId = 1,
                            UnitName = "Штука"
                        },
                        new
                        {
                            Id = 4,
                            ExpirationDate = new DateTime(2024, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductName = "Ацетилсалициловая кислота 500 мг",
                            Quantity = 25.0,
                            RecipeId = 1,
                            UnitName = "Штука"
                        },
                        new
                        {
                            Id = 5,
                            ExpirationDate = new DateTime(2023, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductName = "Экспресс-тест на грипп",
                            Quantity = 10.0,
                            RecipeId = 2,
                            UnitName = "Штука"
                        },
                        new
                        {
                            Id = 6,
                            ExpirationDate = new DateTime(2024, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductName = "Экспресс-тест на грипп",
                            Quantity = 12.0,
                            RecipeId = 2,
                            UnitName = "Штука"
                        },
                        new
                        {
                            Id = 7,
                            ExpirationDate = new DateTime(2023, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductName = "Экспресс-тест на Covid",
                            Quantity = 16.0,
                            RecipeId = 2,
                            UnitName = "Штука"
                        },
                        new
                        {
                            Id = 8,
                            ExpirationDate = new DateTime(2024, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductName = "Экспресс-тест на Covid",
                            Quantity = 14.0,
                            RecipeId = 2,
                            UnitName = "Штука"
                        },
                        new
                        {
                            Id = 9,
                            ExpirationDate = new DateTime(2026, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductName = "Перчатки",
                            Quantity = 10.0,
                            RecipeId = 2,
                            UnitName = "Упаковка"
                        },
                        new
                        {
                            Id = 10,
                            ExpirationDate = new DateTime(2028, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductName = "Маска медицинская",
                            Quantity = 12.0,
                            RecipeId = 2,
                            UnitName = "Упаковка"
                        });
                });

            modelBuilder.Entity("Clinic.Data.Entities.Unit", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("Name");

                    b.ToTable("Units");

                    b.HasData(
                        new
                        {
                            Name = "Упаковка",
                            Abbreviation = "уп"
                        },
                        new
                        {
                            Name = "Штука",
                            Abbreviation = "шт"
                        });
                });

            modelBuilder.Entity("Clinic.Data.Entities.Expense", b =>
                {
                    b.HasOne("Clinic.Data.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Clinic.Data.Entities.ExpenseItem", b =>
                {
                    b.HasOne("Clinic.Data.Entities.Expense", "Expense")
                        .WithMany("Items")
                        .HasForeignKey("ExpenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Clinic.Data.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Clinic.Data.Entities.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Expense");

                    b.Navigation("Product");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Clinic.Data.Entities.Product", b =>
                {
                    b.HasOne("Clinic.Data.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Clinic.Data.Entities.Recipe", b =>
                {
                    b.HasOne("Clinic.Data.Entities.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("Clinic.Data.Entities.RecipeItem", b =>
                {
                    b.HasOne("Clinic.Data.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Clinic.Data.Entities.Recipe", "Recipe")
                        .WithMany("Items")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Clinic.Data.Entities.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Recipe");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Clinic.Data.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Clinic.Data.Entities.Expense", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Clinic.Data.Entities.Recipe", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
